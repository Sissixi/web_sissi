{"name": "test_create_activit", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <input data-bind=\"click: check.bind($data), checked: $data.cells.in_shopping_cart\" class=\"\" type=\"checkbox\" name=\"account_id\"> is not clickable at point (80, 606). Other element would receive the click: <div class=\"loading_mask\"></div>\n  (Session info: chrome=79.0.3945.117)", "trace": "self = <TestCases.TestModuleA.test_1active_activities.Test_Activit object at 0x0000000004A74C50>\ncreate_init = (<selenium.webdriver.chrome.webdriver.WebDriver (session=\"7f4b28648c808f0493f84ccfac5a6862\")>, <PageObjects.ModuleAPage.login_a_page.Logina object at 0x0000000004A667F0>)\n\n    @pytest.mark.usefixtures(\"create_init\")\n    def test_create_activit(self, create_init):\n        '''\n        A端创建预约活动\n        :param create_init: create_init相当于是一个元组（driver, La）\n        :return:\n        '''\n        # 调用A端登录行为\n        create_init[1].login_form(success_a_data[\"username\"], success_a_data[\"password\"], success_a_data[\"code\"])\n        # 点击首页的创建活动按钮\n        HomePage(create_init[0]).click_creat_button()\n        # 切换到最新窗口\n        HomePage(create_init[0]).new_current()\n        # 点击新浪平台\n        SelectPlat(create_init[0]).click_sina()\n        '''先实例化预约需求表单类'''\n        fl = FillPage(create_init[0])\n        # 输入预约需求名称\n        fl.input_name(BookingData.booking_name)\n    \n        # 输入预约需求描述\n        fl.input_description(BookingData.description_content)\n        # 输入预计推广开始时间\n        fl.Execute_start_time(BookingData.start_time)\n    \n        # 输入预计推广结束时间\n        fl.Execute_end_time(BookingData.end_time)\n    \n        # 输入预约结果反馈时间\n        fl.Execute_feedback_time(BookingData.feedback_time)\n    \n        # 选择推广产品所属行业\n        fl.select_trade_button()\n        time.sleep(1)\n    \n        # 点击下一步\n        fl.cilck_next_button()\n    \n        '''选择账号页面类实例化'''\n        sa = AccountSelectPage(create_init[0])\n        # 输入账号名称\n        sa.account_input_name(BookingData.account_name)\n        # 点击新浪微博账号按钮\n        sa.account_seach_button()\n        time.sleep(1)\n        # 选中搜到的账号\n>       sa.checkbox_button()\n\nTestCases\\TestModuleA\\test_1active_activities.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPageObjects\\ModuleAPage\\Create_booking_page\\account_select_page.py:20: in checkbox_button\n    self.click_element(loc.account_select, \"A端选择账号页面_选择搜到的账号按钮\")\nCommons\\basepage.py:101: in click_element\n    ele.click()\nF:\\pythonxi\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:80: in click\n    self._execute(Command.CLICK_ELEMENT)\nF:\\pythonxi\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:633: in _execute\n    return self._parent.execute(command, params)\nF:\\pythonxi\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000000004A66710>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...x7642343D+18]\\\\n\\\\tRtlInitializeExceptionChain [0x77EA9802+99]\\\\n\\\\tRtlInitializeExceptionChain [0x77EA97D5+54]\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <input data-bind=\"click: check.bind($data), checked: $data.cells.in_shopping_cart\" class=\"\" type=\"checkbox\" name=\"account_id\"> is not clickable at point (80, 606). Other element would receive the click: <div class=\"loading_mask\"></div>\nE         (Session info: chrome=79.0.3945.117)\n\nF:\\pythonxi\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: ElementClickInterceptedException"}, "description": "\n        A端创建预约活动\n        :param create_init: create_init相当于是一个元组（driver, La）\n        :return:\n        ", "attachments": [{"name": "log", "source": "dccafb36-6f1a-4e8b-8f01-b40e0e0d2541-attachment.txt", "type": "text/plain"}], "start": 1585620488538, "stop": 1585620519590, "uuid": "9a5583c1-2352-49bf-a26c-baea295fd540", "historyId": "e8582e0580337661f0763fd30274db1c", "testCaseId": "3dfbf800f9a2859d836330fbc0757456", "fullName": "TestCases.TestModuleA.test_1active_activities.Test_Activit#test_create_activit", "labels": [{"name": "parentSuite", "value": "TestCases.TestModuleA"}, {"name": "suite", "value": "test_1active_activities"}, {"name": "subSuite", "value": "Test_Activit"}, {"name": "host", "value": "WIN-01801251448"}, {"name": "thread", "value": "7148-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "TestCases.TestModuleA.test_1active_activities"}]}